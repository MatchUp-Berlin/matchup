type MatchUpUser @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: ID @index(name: "byUser", queryField: "byUser")
  matchUpId: ID @index(name: "byMatchUp", queryField: "byMatchUp")
  user: User @belongsTo(fields: ["userId"])
  matchUp: MatchUp @belongsTo(fields: ["matchUpId"])
  attended: Boolean
}

type MatchUp @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String!
  users: [MatchUpUser] @hasMany(indexName: "byUser", fields: ["id"])
  location: String!
  organizer: String!
  sportCategory: String!
  skillLevel: String
  totalCost: Int
  reservedCourt: Boolean
  attendanceMin: Int
  attendanceMax: Int
  cancelled: Boolean
  indoor: Boolean
  description: String
  image: String
  date: AWSDateTime
  currency: String
  updates: [Update] @hasMany(indexName: "byMatchUpUpdates", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  givenName: String!
  familyName: String!
  email: String!
  matchUps: [MatchUpUser] @hasMany(indexName: "byMatchUp", fields: ["id"])
  profileImage: String
  about: String
  updates: [Update] @hasMany(indexName: "byUserUpdates", fields: ["id"])
}

type Update @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: ID @index(name: "byUserUpdates")
  matchUpId: ID @index(name: "byMatchUpUpdates")
  user: User @belongsTo(fields: ["userId"])
  matchUp: MatchUp @belongsTo(fields: ["matchUpId"])
  content: String
}
